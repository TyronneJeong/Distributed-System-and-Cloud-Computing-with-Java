Distributed Banking System - Practice
In this exercise we will build a Distributed Banking System

Background
Let's assume we have a large number of users. Each user has an account with our bank and was also issued a credit card to make purchases in stores.

If our bank suspects a particular purchase transaction may be fraudulent, that transaction is flagged and sent to the user as a notification to approve or reject.

The way our security detects suspicious transactions is by comparing the user's country of residence and the location from which the transaction was made. If the user's residence country and the transaction's location don't match, the transaction is flagged.

Architecture
In our distributed system we will have multiple micro-services.


Banking API Service - Receives credit card transactions from online and physical stores. Each transaction contains the following information

User - the user who (allegedly) made the purchase in that particular store

Amount - the amount of the purchase transaction in dollars

Transaction location - the country in which that purchase has been made

Users Database - A database where we store each of our bank users' residence location

User Notification Service - for every transaction this service receives, it sends a notification to the user who allegedly made the purchase with a request to log in the banking web site and confirm or reject the transaction

Account Manager Service - every transaction that this service receives is a valid transaction. The service authorizes the transaction and transfers the money from the user's account to the store where the purchase was made

Reporting Service - For every transaction that has been processed by the Banking API Service, the Reporting Service stores the transaction for:

Further investigation (if it is a suspicious transaction) or;

For the user's monthly statement (if it is a valid transaction)

All the communication inside our Distributed System is done through Kafka Topics

Assignment Part 1 - Launching Kafka
Download Kafka to your computer from this link.

Navigate to the downloaded file, and unpack it.

Configure and start zookeeper as we learned in the lecture.

Launch 3 Kafka brokers listening on ports 9092, 9093 and 9094.

Create a new Kafka topic called valid-transactions with replication factor of 3 and 3 partitions.

Create a new Kafka topic called suspicious-transactions with replication factor of 3 and 2 partitions.

Validate that all the topics are created correctly.



Assignment Part 2 - Implementation of the Microservices in Java
Download the banking-system-exercise.zip from this lecture's resources

Fill in the code in the Banking API Service, Account Manager Service, User Notification Service and Reporting Service. (It is recommended to follow that order)

Build and package each application.

Run all the services with Banking API Service being last

Observe that the correct transactions are routed to the corresponding services.

See solution in the next lecture.

Have fun:)