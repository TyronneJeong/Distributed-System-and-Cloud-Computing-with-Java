hey guys welcome back in this lecture we'll continue scaling

our distributed MongoDB by shard in our data across multiple MongoDB nodes we

will start with talking about the sharding strategies MongoDB supports and

then talk about MongoDB router a config servers and what our cluster

architecture is going to look like MongoDB

supports two sharding strategies that we already learned in the previous lectures

the hash based strategy and the range based strategy we already learned the

theory of those two strategies so now let's focus on how those strategies are

implemented with MongoDB in either of those strategies we first need to decide

on the shard in key in a given collection we can pick any field as the

shard in key but the decision on which key to shard on cannot be changed later

and has important implications on whether our collection can scale

horizontally across shards or create hotspots in our system that we won't be

able to recover from the shard in key should be chosen together with the right

charting strategy to guarantee scalability as the number of the

documents in our collection grows and guarantee efficient queries is the

number of operations per second on our database increases

in either of the strategies the records are bucketed into chunks each chunk has

a lower and upper bound and together all the chunks are covering the entire key

space how documents are assigned to a particular chunk is based on the

sharding strategy in the hash based sharding strategy a hash function is

applied on each of the documents keys and that determines the chunk to which

this document is assigned to notice again that consecutive key values may be

hashed to different chunks in the range based sharding we don't

really need to apply any transformation on the key instead we simply need to

find a chunk that corresponds to the range of keys that are a document ski

falls into and as we expect documents with close by keys are much more likely

to be part of the same chunk now once our documents are assigned to their

chunks based on the sharding algorithm the chunks are distributed evenly and

stored on the MongoDB charts as we get more documents into our collection some

of our chunks become bigger as they contain more documents when a

configurable threshold of a chunk size or a number of documents per chunk is

exceeded the overcrowded chunk is split into multiple smaller chunks once

MongoDB detects an uneven distribution of chunks among the shards their load is

balanced through chunk migration from one shard to another chart

so now that we understand how sharding strategies work on the shard level let's

look at the rest of MongoDB cluster architecture and how all the Sharda

implementation comes together in order for the client application to

actually know which char to talk to in a given query we need an additional

component called router which runs as a Mongo -- instance so instead of

connecting to any shark directly the application just needs to know the

routers address and the router will direct the query to one or multiple

shards depending on the query the router however only routes queries based on the

current location of the chunks the component that actually makes the

decision on where each chunk is going to be located and also performs the

balancing among the shards is the config server which also runs as a separate

process so essentially the router just routes queries based on the information

provided to it by the config server because the information in the config

server is so critical for the sharded cluster MongoDB forces us to run the

config server as a replication set of course for complete fault tolerance in

production we would want to run each shard as a replication set and have a

pool of Mongo as instances instead of one that is to guarantee we don't have

any single point of failure in our entire MongoDB cluster so now we can add

servers to any replication set if needed and also add more shards depending on

the traffic or the size of our data set in this lecture we'll learn how to scale

a distributed MongoDB using data sharding we'll learn about the two

sharding strategies that MongoDB supports and how they're implemented in

MongoDB specifically we talked about how documents are assigned to chunks that

spend the entire key space and how chunks are load balance among the shards

based on their size or the number of documents we also talked about the role

Mongo s router plays in routing queries to the right chard and the config server

cluster that stores manages and balances the chunks among the different charts

finally we ended our lecture with a fully sharded and replicated distributed

MongoDB architecture that can scale horizontally completely transparently to

the clients and seamlessly recover from any failure of individual MongoDB

servers see you guys in the next lecture